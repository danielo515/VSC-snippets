{
	"Ejs variable": {
		"prefix": "ejv",
		"body": "<%= $1 %>",
		"description": "create a ejs variable for use in yeoman"
	},
	"Tiddlywiki5 javascript header": {
		"prefix": "tw5-js-header",
		"body": [
			"/*\\",
			"title: $:/plugins/danielo515/$1/$2",
			"type: application/javascript",
			"module-type: library",
			"$3",
			"\n@preserve",
			"\n\\*/"
		],
		"description": "description"
	},
	"destructure import": {
		"prefix": "reqdestr",
		"body": [
			"const { $2 } = require('$1');"
		],
		"description": "Import parts of a module using destructuring"
	},
	"Module exporting an arrow function": {
		"prefix": "exportsarr",
		"body": [
			"module.exports = ($1) => {",
			"  $2",
			" };"
		],
		"description": "Import parts of a module using destructuring"
	},
	"destructure const": {
		"prefix": "constd",
		"body": [
			"const { $1 } = $2"
		],
		"description": "Declare a constant with destructuring"
	},
	// Function shortcuts
	"arrow function with body": {
		"prefix": "arrb",
		"body": [
			"($1) => {",
			"  $2",
			" };"
		],
		"description": "Arrow function with body"
	},
	"arrow function": {
		"prefix": "arr",
		"body": [
			"($1) => $2"
		],
		"description": "Arrow function without body"
	},
	"arrow function double": {
		"prefix": "arr2",
		"body": [
			"($1) => ($2) => $3"
		],
		"description": "Arrow function without body and two arguments"
	},
	// == Require shortcuts
	// Cli/File shortcuts
	"promisified fs": {
		"prefix": "fsp",
		"body": [
			"const { readdir, writeFile: _writeFile, readFile: _readFile } = require('fs');",
			"const { promisify } = require('util');",
			"const writeFile = promisify(_writeFile);",
			"const readDir = promisify(readdir);"
		]
	},
	"varstr": {
		"prefix": "varstr",
		"body": [
			"\\${$1}"
		],
		"description": "Create a variable inside a template string"
	},
	// FRONTEND RELATED STUFF
	"native-import": {
		"prefix": "native",
		"body": [
			"import React from \"react\";",
			"import { Text } from \"react-native\";"
		],
		"description": "Imports for react native"
	},
	"react prop": {
		"prefix": "reprop",
		"body": "$1={$2}"
	},
	"react arrow function prop": {
		"prefix": "propf",
		"body": "$1 ={ $2 => $3}",
		"description": "react property with an arrow function"
	},
	"react same prop": {
		"prefix": "resprop",
		"body": "$1={$1}"
	}
	// REDUX
	,
	"redux": {
		"prefix": "rxcase",
		"body": [
			"case $ACTION_NAME: return {",
			"\t...state,",
			"\t$property: action.payload"
		}
	]
}
}