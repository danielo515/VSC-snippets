{
  // Tasker-js-runnner
  "task description": {
    "prefix": "tskjs",
    "body": [
      " export const $1 = {",
      "      enter(locals, tasker){",
      "         $0",
      "      },",
      "      exit(locals, tasker){",
      "          ",
      "      }",
      "  };"
    ]
  },
  "Ejs variable": {
    "prefix": "ejv",
    "body": "<%= $1 %>",
    "description": "create a ejs variable for use in yeoman"
  },
  "TiddlyWiki5 javascript header": {
    "prefix": "tw5-js-header",
    "body": [
      "/*\\",
      "title: $:/plugins/danielo515/$1/$2",
      "type: application/javascript",
      "module-type: library",
      "$3",
      "\n@preserve",
      "\n\\*/"
    ],
    "description": "description"
  },
  // ====== JS generic ====
  "destructure import": {
    "prefix": "reqdestr",
    "body": [
      "const { $0 } = require('$1');"
    ],
    "description": "Import parts of a module using destructuring"
  },
  "Module exporting an arrow function": {
    "prefix": "expfn",
    "body": [
      "const $1 = ($2) => {",
      "  $0",
      " };",
      "module.exports = $1"
    ],
    "description": "Exports an arrow function"
  },
  "Module with a named arrow function export": {
    "prefix": "expnfn",
    "body": [
      "const $1 = ($2) => {",
      "  $0",
      " };",
      "module.exports.$1 = $1"
    ],
    "description": "Exports an arrow function"
  },
  "export regular function": {
    "prefix": "exfn",
    "body": [
      "export function ${name}(${args}){",
      "  $0",
      " };",
    ],
    "description": "Export named function (old style)"
  },
  "Module exports": {
    "prefix": "expobj",
    "body": [
      "module.exports = {$0};"
    ],
    "description": "export an object"
  },
  "destructure const": {
    "prefix": "constd",
    "body": [
      "const { $0 } = $1"
    ],
    "description": "Declare a constant with destructuring"
  },
  "conditional props": {
    "prefix": "condprops",
    "body": [
      "...($1 ? {$2}:{$3})"
    ],
    "description": "Ternary based object properties"
  },
  // Function shortcuts
  "javascript normal function": {
    "prefix": "fun",
    "body": [
      "function $1($2) {",
      "    return $0",
      "}"
    ],
    "description": "basic javascript function"
  },
  "arrow function double": {
    "prefix": "arr2",
    "body": [
      "($1) => ($2) => $0"
    ],
    "description": "Arrow function without body and two arguments"
  },
  "index by helper": {
    "prefix": "indxby",
    "body": "const indexBy = key => (acc, o) => (acc[o[key]] = o, acc);"
  },
  "collect at helper": {
    "prefix": "collectat",
    "body": "const collectAt = key => (acc, o) => (acc[key].push(o), acc);"
  },
  "Json stringify": {
    "prefix": "jstr",
    "body": "JSON.stringify($0)",
    "description": "JSON.stringify shortcut"
  },
  "Json stringify semicolon": {
    "prefix": "jstr;",
    "body": "JSON.stringify($0);",
    "description": "JSON.stringify shortcut with semi colon"
  },
  "Json parse": {
    "prefix": "jpar",
    "body": "JSON.parse($0)",
    "description": "JSON.parse shortcut"
  },
  // reselect
  "create selector": {
    "prefix": "createSel",
    "body": [
      "const $1 = createSelector($0);"
    ]
  },
  // Eslint shortcuts
  "eslint-jest": {
    "prefix": "esjest",
    "body": "/* eslint-env jest */\n"
  },
  "ts-check": {
    "prefix": "tsc",
    "body": "// @ts-check\n"
  },
  // == Require shortcuts
  "dummy index": {
    "prefix": "idx",
    "description": "imports the current folder and exports it",
    "body": [
      "import ${TM_DIRECTORY/(.*\\/)//} from './${TM_DIRECTORY/(.*\\/)//}.component';\n",
      "export default ${TM_DIRECTORY/(.*\\/)//};\n"
    ]
  },
  "import-phrases": {
    "prefix": "imph",
    "description": "imports phrases file for current component",
    "body": [
      "import phrases from './${TM_DIRECTORY/(.*\\/)//}.phrases';\n",
    ]
  },
  "export default as foldername": {
    "prefix": "imde",
    "description": "exports the default named as the folder",
    "body": [
      "export { default as ${TM_DIRECTORY/(.*\\/)//}} from './${TM_DIRECTORY/(.*\\/)//}'\n"
    ]
  },
  // Cli/File shortcuts
  "promisified fs": {
    "prefix": "imfsp",
    "body": [
      "const { rename: rn, readdir, writeFile: _writeFile, readFile: _readFile } = require('fs');",
      "const { promisify } = require('util');",
      "const writeFile = promisify(_writeFile);",
      "const rename = promisify(rn);",
      "const readDir = promisify(readdir);"
    ]
  },
  "varstr": {
    "prefix": "varstr",
    "body": [
      "\\${$1}"
    ],
    "description": "Create a variable inside a template string"
  },
  // Test shortcuts
  "symbol mock": {
    "prefix": "testSym",
    "body": "const $1 = Symbol('$1');"
  },
  "jest this": {
    "prefix": "jestthis",
    "body": "const $TM_CURRENT_LINE = jest.fn($1);$0",
    "description": "turn the following selected text into a jest mock"
  },
  "expect called with symbol": {
    "prefix": "excws",
    "description": "Creates an expect statement for a mock function to have been called with a symbol",
    "body": [
      " const $1 = Symbol('$1');",
      "    $0",
      " expect($2).toHaveBeenCalledWith($1);"
    ]
  },
  // FRONTEND RELATED STUFF
  //  REACT
  "Async load component": {
    "prefix": "asrc",
    "body": [
      "  const LoadingComponent = () => <h3>please wait...</h3>;",
      "const ${1}Promise = () => {",
      "  return import('../$1');",
      "};",
      "const Dashboard = loadable({",
      "  loader: ${1}Promise,",
      "  loading: LoadingComponent,",
      "});"
    ],
    "description": "Async load component"
  },
  "react map component": {
    "prefix": "mapre",
    "body": [
      "$1.map(({ $2, $3 }) => (",
      "<$3 >",
      "$0",
      "</$>",
      "))"
    ]
  },
  "Styled component": {
    "prefix": "stc",
    "description": "Adds a basic styled component",
    "body": [
      "styled.$1`",
      "   $0:",
      " `;"
    ]
  },
  "react index key": {
    "prefix": "rkeyidx",
    "body": "key={`$1-\\${$2}-\\${i}`}$0"
  },
  "proptypes current component": {
    "prefix": "ptcom",
    "body": [
      "${1:${TM_FILENAME_BASE}.propTypes={",
      "$0",
      "}"
    ]
  },
  "native-import": {
    "prefix": "native",
    "body": [
      "import React from \"react\";",
      "import { Text } from \"react-native\";"
    ],
    "description": "Imports for react native"
  },
  "default-props": {
    "prefix": "defprops",
    "description": "Default props for this component",
    "body": [
      "${1:${TM_FILENAME_BASE}}.defaultProps = {",
      "    message: 'hello',",
      "};"
    ]
  },
  "react prop": {
    "prefix": "reprop",
    "body": "$1={$2}"
  },
  "react arrow function prop": {
    "prefix": "propf",
    "body": "$1 ={ $2 => $3}",
    "description": "react property with an arrow function"
  },
  "react same prop": {
    "prefix": "resprop",
    "body": "$1={$1}"
  },
  "create a normal tag": {
    "body": "<$1 $2>$0</$1>",
    "description": "basic tag template",
    "prefix": "tag"
  },
  "div-class": {
    "prefix": "div-class",
    "description": "A react div with classname",
    "body": "<div className={Css['$1']}>$2</div>"
  },
  "replace word with a tag": {
    "body": "<$TM_CURRENT_WORD ></$TM_CURRENT_WORD>",
    "description": "transforms the current word into an HTML tag",
    "prefix": "tagrep"
  },
  // REDUX
  "redux store": {
    "prefix": "rxstore",
    "body": [
      "import { createStore, combineReducers } from 'redux'; ",
      "import $reducer from './$reducer'; ",
      " ",
      "const rootReducer = combineReducers({ ",
      "  $reducer ",
      "}); ",
      " ",
      "export default () => createStore(rootReducer, {}); "
    ]
  },
  "redux switch case": {
    "prefix": "rxcase",
    "body": [
      "case $ACTION_NAME: return {",
      "\t...state,",
      "\t$property: action.payload"
    ]
  },
  "redux const action": {
    "prefix": "rxac",
    "body": [
      "export const $ACTION_NAME = `\\${prefix} $ACTION_NAME`;$0"
    ]
  },
  "redux const action_creator": {
    "prefix": "rxacc",
    "description": "redux action creator. The function name becomes the action type in uppercase and camelCase",
    "body": [
      "const ${1} => ({ type: ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g} $0});"
    ]
  },
  // Material UI
  "Import material ui core component": {
    "prefix": "mui-imp",
    "body": "import $1 from '@material-ui/core/$1';",
    "description": "A regular material ui import from core"
  },
  "Import material ui button": {
    "prefix": "mui-impbutt",
    "body": "import Button from '@material-ui/core/Button';",
    "description": "material ui import button statement"
  },
  "Import material ui Dialog title": {
    "prefix": "mui-impditi",
    "body": "import DialogTitle from '@material-ui/core/DialogTitle';",
    "description": "material ui import dialog title statement"
  },
  "material ui with styles": {
    "prefix": "mui-wstyles",
    "body": [
      "import { withStyles } from '@material-ui/core/styles';",
      "",
      "const styles = ({palette, spacing}) => ({",
      "    root: {",
      "        display: 'flex',",
      "        flexDirection: 'column',",
      "        alignItems: 'center',",
      "        backgroundColor: palette.background.default",
      "        padding: `${spacing.unit}px`",
      "    }",
      "})",
      "export default withStyles(styles)(${1:${TM_FILENAME_BASE}});"
    ],
    "description": "Insert material ui with styles declarations"
  },
  "material ui functional component": {
    "prefix": "mui-func-comp",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import Typography from '@material-ui/core/Typography';",
      "import { withStyles } from '@material-ui/core/styles';",
      "",
      "const styles = ({palette, spacing}) => ({",
      "    root: {",
      "        display: 'flex',",
      "        flexDirection: 'column',",
      "        alignItems: 'center',",
      "        backgroundColor: palette.background.default",
      "        padding: `${spacing.unit}px`",
      "    }",
      "})",
      "",
      "",
      "const ${1:${TM_FILENAME_BASE}} = props => {",
      "    return (",
      "        <div className={props.classes.root}>",
      "            <Typography",
      "                variant='h6'",
      "                align='center'",
      "                color='textSecondary'",
      "                paragraph",
      "            >",
      "                {props.message}",
      "            </Typography>",
      "        </div>",
      "    );",
      "};",
      "",
      "${1:${TM_FILENAME_BASE}}.defaultProps = {",
      "    message: 'hello',",
      "};",
      "",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "    message: PropTypes.string,",
      "};",
      "",
      "export default withStyles(styles)(${1:${TM_FILENAME_BASE}});"
    ],
    "description": "Material ui functional component"
  },
  // JSDOC types //
  "jsdoc actions definition": {
    "prefix": "jdacts",
    "body": [
      "/**",
      " * @typedef {A<$1, void>",
      " * |A<$2, void>",
      " * |A<$3, void>",
      " * |A<$4, {error: any}>} Actions",
      " * */"
    ],
    "description": "jsdoc actions definition for typescript annotation"
  },
  "jsdoc props": {
    "prefix": "jdprops",
    "body": [
      "/** ",
      " * @typedef {Object} Props",
      " * @property {${string}} $1",
      " * @property {${number}} $2",
      " * @property {${function}} $3",
      " */",
      "",
      "/** @param {Props} props **/",
    ],
    "description": "generate jsdoc annotation for props"
  },
  "jsdoc type ": {
    "prefix": "jdtype",
    "body": "/** @type { $0 } */",
    "description": "Basic jsdoc type"
  },
  "jsdoc function type definition": {
    "prefix": "jdtfun",
    "body": "/** @type { (args: $1) => $0 } */",
    "description": "function type cast"
  },
  "jsdoc type definition": {
    "prefix": "jdtdef",
    "body": "/** @typedef {$1} $0 */",
    "description": "jsdoc type definition"
  },
  "jsdoc type definition import": {
    "prefix": "jdtdefi",
    "body": "/** @typedef {typeof import('./$1').default} $0 */",
    "description": "jsdoc type definition import"
  },
  // PENTO //
  "spring select": {
    "prefix": "sprsel",
    "body": [
      "        <Select",
      "          label={__('labels.frequency')}",
      "          onChange={setScheduleType}",
      "          value={scheduleType}",
      "        >",
      "          <Option value=\"monthly\">Monthly</Option>",
      "          <Option value=\"forthnigthly\">Forthnightly</Option>",
      "        </Select"
    ],
    "description": "basic spring select statement"
  },
  "spring component": {
    "description": "spring component with everything",
    "prefix": "scomp",
    "body": [
      "    type ${name}Props = {",
      "  /**",
      "   * If further customization is needed provide a custom class name,",
      "   * it will be applied to the root of the component as the last class,",
      "   * giving it the greatest precedence",
      "   */",
      "  className?: string,",
      "}",
      "",
      "export function ${name}({ size, className }: ${name}Props) {",
      "  const classes = [className].join(' ').trim()",
      "  return <div className={classes}></div>",
      "}",
      "",
      "${name}.defaultProps = {",
      "  className: '',",
      "}",
      ""
    ]
  },
  "spring modal": {
    "prefix": "smodal",
    "body": [
      "<Modal isOpen={true}>",
      "    <ModalHeader>",
      "    </ModalHeader>",
      "    <ModalFooter>",
      "      <FormRow>",
      "        <Button fluid>Close</Button>",
      "      </FormRow>",
      "    </ModalFooter>",
      "  </Modal>\""
    ]
  },
  "spring list in card": {
    "prefix": "scardlist",
    "body": [
      "    <RawCard bgColor=\"grey\">",
      "      <List>",
      "        {values.map(({ label, value }) => (",
      "          <ListItem>",
      "            <span>{label}</span>",
      "            <span>{value}</span>",
      "          </ListItem>",
      "        ))}",
      "      </List>",
      "    </RawCard>",
    ]
  },
  "spring list in card import": {
    "prefix": "ifsliscar",
    "body": [
      "    RawCard,",
      "    List,",
      "    ListItem,"
    ]
  },
  "spring": {
    "prefix": "ifs",
    "body": "import {$0} from 'spring'"
  },
  /// Storybook
  "close panel": {
    "prefix": "stpan",
    "description": "Do not show panel for one specifis story",
    "body": "$0.stories = { parameters: { showPanel: false } }"
  },
  "translator": {
    "body": "import type { translator } from 'components/polyglotProvider",
    "prefix": "ityt"
  },
  // Flow
  "import type from react": {
    "body": "import type { $Node } from 'react'",
    "description": "Imports a type from react",
    "prefix": "imtr"
  },
  "type props": {
    "prefix": "typp",
    "body": [
      "type $1Props = {",
      "  $2: $0,",
      "}"
    ]
  }
}